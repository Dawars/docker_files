ARG CUDA_IMAGE_TAG=11.8.0
ARG OS_VERSION=22.04
ARG USER_ID=1000


ARG PYTHON_VERSION=3.10
ARG PYTORCH_VERSION=1.13.1
ARG TORCHVISION_VERSION=0.14.1
ARG CUDA=11.7
#
# Docker builder stage.
#
FROM dawars/pytorch:torch${PYTORCH_VERSION}-cu${CUDA} as builder

ARG COLMAP_GIT_COMMIT=f1a4c884792d662ef1d3a6cd51e526fd71623129
ARG CUDA_ARCHITECTURES=86;80;75
ENV QT_XCB_GL_INTEGRATION=xcb_egl

# Prevent stop building ubuntu at time zone selection.
ENV DEBIAN_FRONTEND=noninteractive

USER root

WORKDIR /workspace

# Prepare and empty machine for building.
RUN apt-get update && \
    apt-get install -y --no-install-recommends --no-install-suggests \
        git \
        cmake \
        ninja-build \
        build-essential \
        libboost-program-options-dev \
        libboost-filesystem-dev \
        libboost-graph-dev \
        libboost-system-dev \
        libeigen3-dev \
        libfreeimage-dev \
        libflann-dev \
        libmetis-dev \
        libgoogle-glog-dev \
        libgtest-dev \
        libsqlite3-dev \
        libglew-dev \
        qtbase5-dev \
        libqt5opengl5-dev \
        libcgal-dev \
        libsuitesparse-dev

ARG CUDA_ARCHITECTURES=61;86;80;75

# Build and install COLMAP.
RUN git clone https://github.com/dawars/ceres-solver.git --recursive -b cuda-args
RUN cd ceres-solver && \
    mkdir build && \
    cd build && \
    cmake .. -GNinja \
      -DCMAKE_BUILD_TYPE=Release \
      -DCMAKE_CUDA_ARCHITECTURES=$CUDA_ARCHITECTURES \
      -DCMAKE_INSTALL_PREFIX=/ceres_installed && \
    ninja install

RUN /workspace/ceres-solver/build/bin/simple_bundle_adjuster /workspace/ceres-solver/data/problem-16-22106-pre.txt
# RUN cd /workspace/ceres-solver/build/ && CUDA_LAUNCH_BLOCKING=1 ctest

# fix runtime issue libstdc++.so.6: version `GLIBCXX_3.4.30' not found
RUN conda install conda-forge::freeimage

# Build and install COLMAP.
RUN git clone https://github.com/dawars/colmap.git && \
    cd colmap && \
    git checkout 6d45e67e404520dc97e0899cf6e08974b9c6f802 && \
    mkdir build && \
    cd build && \
    cmake .. -GNinja  -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_CUDA_ARCHITECTURES=${CUDA_ARCHITECTURES} \
        -DCUDA_ENABLED=ON \
        -DCMAKE_INSTALL_PREFIX=/colmap_installed \
        -DBUILD_TESTING=ON \
        -DGUI_ENABLED=OFF && \
    ninja install && \
    cd ../..
#        -DCMAKE_PREFIX_PATH="/opt/conda/lib;/opt/conda/include;/opt/conda/" \
#        -DFREEIMAGE_INCLUDE_DIR_HINTS=/opt/conda/include \
#        -DFREEIMAGE_LIBRARY_DIR_HINTS=/opt/conda/lib \
RUN cp -r /colmap_installed/* /usr/local/ && \
    cd colmap/pycolmap && \
    pip install "pybind11[global]" && \
    python -m pip wheel --config-settings=cmake.define.CMAKE_PREFIX_PATH="/opt/conda/lib;/opt/conda/include;/opt/conda/" \
     -vv . -w .
#     && \
#    python -m pip install pycolmap-3.10.dev0-cp310-cp310-linux_x86_64.whl  # install for pixsfm build dependency

# \
 #    --config-settings=cmake.define.CMAKE_CUDA_ARCHITECTURES=${CUDA_ARCHITECTURES} \
 #    --config-settings=cmake.define.CUDA_ENABLED=ON

#pixsfm doesn't support scipy-builder for cmake args
#RUN git clone --recursive https://github.com/dawars/pixel-perfect-sfm.git -b colmap-3.9 && \
#  cd pixel-perfect-sfm && mkdir build && \
#    python -m pip wheel -vvv . -w .

# RUN cd pixel-perfect-sfm && \
#    mkdir build-exe && \
#    cd build-exe && \
#    cmake .. -GNinja  -DCMAKE_BUILD_TYPE=Release \
#        -DBUILD_TESTING=OFF \
#        -DCMAKE_CUDA_ARCHITECTURES=${CUDA_ARCHITECTURES} \
#        -DCMAKE_INSTALL_PREFIX=/pixsfm_installed && \
#    ninja install

#
# Docker runtime stage.
#
FROM dawars/pytorch:torch${PYTORCH_VERSION}-cu${CUDA} as runtime

ARG CUDA_ARCHITECTURES=86;80;75

USER root

# Minimal dependencies to run COLMAP binary compiled in the builder stage.
# Note: this reduces the size of the final image considerably, since all the
# build dependencies are not needed.
RUN apt-get update && \
    apt-get install -y --no-install-recommends --no-install-suggests \
        libboost-filesystem1.74.0 \
        libboost-program-options1.74.0 \
        libsuitesparse-dev \
        libfreeimage-dev \
        libeigen3-dev \
        libc6 \
        libgcc-s1 \
        libmetis-dev \
        libgl1 \
        libglew2.2 \
        libgoogle-glog0v5 && \
    rm -rf /var/lib/apt/lists/*
# Copy all files from /colmap_installed/ in the builder stage to /usr/local/ in
# the runtime stage. This simulates installing COLMAP in the default location
# (/usr/local/), which simplifies environment variables. It also allows the user
# of this Docker image to use it as a base image for compiling against COLMAP as
# a library. For instance, CMake will be able to find COLMAP easily with the
# command: find_package(COLMAP REQUIRED).
COPY --from=builder /ceres_installed/ /usr/local/
COPY --from=builder /colmap_installed/ /usr/local/
COPY --from=builder /workspace/colmap/pycolmap/pycolmap-3.10.dev0-cp310-cp310-linux_x86_64.whl /tmp/
# COPY --from=builder /workspace/pixel-perfect-sfm/pixsfm-1.0.0-cp310-cp310-linux_x86_64.whl /tmp/

# fix runtime issue libstdc++.so.6: version `GLIBCXX_3.4.30' not found
RUN conda install conda-forge::freeimage

RUN pip install /tmp/pycolmap-3.10.dev0-cp310-cp310-linux_x86_64.whl \
    pyceres
#    git+https://github.com/Dawars/Hierarchical-Localization.git@5a8770a1077de8abb8fdf072519a9485bfe8c698 && \
#    rm -r /tmp/*.whl
#    /tmp/pixsfm-1.0.0-cp310-cp310-linux_x86_64.whl \

#pixsfm doesn't support scipy-builder for cmake args
#RUN git clone --recursive https://github.com/dawars/pixel-perfect-sfm.git -b colmap-3.9 && \
#  cd pixel-perfect-sfm && mkdir build && \
#    python -m pip install -vvv . \

USER ${USER_ID}
# Change working directory
WORKDIR /workspace
